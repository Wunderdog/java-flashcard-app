type: edu
custom_name: stage6
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine(updateContext: CtxUpdate = {}) = OutputLine { _, ctx -> CheckResult.TRUE.also { updateContext(ctx) } }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.FALSE(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.TRUE
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback() = CheckResult.FALSE("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.")

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }
                        val result = phraseLine.checker(lineIter.next(), context)
                        if (result != CheckResult.TRUE) {
                            return CheckResult.FALSE(result.feedback)
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.TRUE
        }
    }

    fun dialogTest(vararg phrases: Phrase): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
    }
  learner_created: false
- name: test/common/FlashcardsStage6Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.stage.BaseStageTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import flashcards.Main
    import java.io.File

    abstract class FlashcardsStage6Test : BaseStageTest<DialogClue>(Main::class.java) {

        override fun generate(): List<TestCase<DialogClue>> {
            File("capitals.txt").delete()
            File("testLog.txt").delete()
            val tests = mutableListOf<TestCase<DialogClue>>()

            val capitalList = mutableListOf<Pair<String, String>>()
            fun capitals() = capitalList.toTypedArray()

            // wrappers for add/remove card, but saving cards to capitalList:
            fun addCapital(card: String, def: String) = addCard(card, def)
                    .also { capitalList += card to def }

            fun removeCapital(card: String) = removeCard(card)
                    .also { capitalList.removeIf { it.first == card } }

            // clear files
            tests += dialogTest(
                    exportCards("capitals.txt", 0),
                    exit()
            )
            tests += dialogTest(
                    hardestCards(),
                    addCapital("France", "Paris"),
                    askCards("France", "??"),
                    hardestCards(),// wrong cards for test are updated in the previous line
                    resetStats(),
                    hardestCards(),
                    addCapital("Russia", "Moscow"),
                    askCards("??", "??"),
                    hardestCards(),
                    askCards("??", "??"),
                    hardestCards(),
                    askCards("??", "??"),
                    hardestCards(),
                    askCards("??", "??"),
                    hardestCards(),
                    askCards("??", "??", saveWrongAnsweredCapitals = true),
                    hardestCards(),
                    exportCards("capitals.txt", 2),
                    log("testLog.txt"),
                    exit()
            )
            tests += dialogTest(
                    hardestCards(),
                    addCard("France", "UpdateMeFromImport"),
                    askCards("??", "??"),
                    importCards("capitals.txt", *capitals()),
                    hardestCards(wrongAnsweredCapitals), // restored from the previous test
                    removeCapital("France"),
                    removeCapital("Russia"),
                    hardestCards(), // empty
                    exit()
            )
            return tests
        }

        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }


        // ------ extensions for building a dialog: ------

        fun inputAction(action: String) = compositePhrase {
            listOf(containing("action", hint = "This line should ask the action."), user(action))
        }

        inner class LogPhrase(val fileName: String) : Phrase {
            override fun toPhraseLines() = compositePhrase(
                    inputAction("log"),
                    anyLine(),
                    user(fileName),
                    OutputLine { text, ctx ->
                        val result = containing("saved", hint = "This line should indicate, that the log has been saved.").checker(text, ctx)
                        if (!result.isCorrect) {
                            return@OutputLine result
                        }
                        if (!File(fileName).exists()) {
                            return@OutputLine CheckResult.FALSE("The log file $fileName does not exist.")
                        }
                        CheckResult.TRUE
                    }
            ).toPhraseLines()
        }

        private fun log(fileName: String) = LogPhrase(fileName)

        private fun resetStats() = compositePhrase(
                inputAction("reset stats"), containing("reset", hint = "This line should confirm card statistics reset.",
                updateContext = { ctx -> ctx.wrongCards.clear() })
        )

        /** Between tests we cache wrong answered capitals to check hardest cards, when we restore them from file. */
        private val wrongAnsweredCapitals: MutableList<String> = mutableListOf()

        /** [customWrongCards] are used to load saved wrong cards from the previous test. */
        fun hardestCards(customWrongCards: List<String>? = null) = compositePhrase(
                inputAction("hardest card"),
                OutputLine { text, ctx ->
                    if (customWrongCards != null) {
                        ctx.wrongCards.clear()
                        ctx.wrongCards.addAll(customWrongCards)
                    }
                    val groupedCards = ctx.wrongCards
                            .groupBy { it }.mapValues { (_, v) -> v.size }
                    val maxMistakes = groupedCards.values.max() ?: 0
                    val hardestCards = groupedCards.filterValues { it == maxMistakes }.keys.toList()

                    when (hardestCards.size) {
                        0 -> return@OutputLine containing("There are no cards with errors").checker(text, ctx)
                        1 -> return@OutputLine containing("The hardest card is \"${hardestCards[0]}\"",
                                "$maxMistakes").checker(text, ctx)
                        else -> {
                            hardestCards.forEach { card ->
                                if (card !in text) {
                                    return@OutputLine CheckResult.FALSE("Your line `$text`\n" +
                                            "should contain the hardest cards " +
                                            "${hardestCards.joinToString("\", \"", "\"", "\"")} with $maxMistakes mistakes.")
                                }
                            }
                            val numberOfHardestCards = text.count { it == '"' }
                            if (numberOfHardestCards != hardestCards.size * 2) {
                                return@OutputLine CheckResult.FALSE("Your line `$text`\n" +
                                        "contains more hardest cards, than expected. Expected: $hardestCards.")
                            }
                            if (maxMistakes.toString() !in text) {
                                if (numberOfHardestCards != hardestCards.size) {
                                    return@OutputLine CheckResult.FALSE("Your line `$text`\n" +
                                            "should contain $maxMistakes mistakes for your hardest cards.")
                                }
                            }
                        }
                    }
                    CheckResult.TRUE
                }
        )


        // extend dialog context with our own data:

        @Suppress("UNCHECKED_CAST")
        private val Context.cardToDef
            get() = rawData.getOrPut("cardToDef") { mutableMapOf<String, String>() } as MutableMap<String, String>

        @Suppress("UNCHECKED_CAST")
        /** All cards, that were answered wrong. */
        private val Context.wrongCards
            get() = rawData.getOrPut("wrongCards") { mutableListOf<String>() } as MutableList<String>


        @Suppress("UNCHECKED_CAST")
        private val Context.defToCard
            get() = rawData.getOrPut("defToCard") { mutableMapOf<String, String>() } as MutableMap<String, String>

        private fun Context.addCard(card: String, definition: String) {
            cardToDef[card] = definition
            defToCard[definition] = card
        }

        private fun Context.removeCard(card: String) {
            val def = cardToDef.remove(card)
            if (def != null) {
                defToCard.remove(def)
            }
        }


        private fun addCard(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("has been added",
                        hint = "This line should add the pair (\"$card\":\"$def\").",
                        updateContext = { ctx -> ctx.addCard(card, def) })
        )


        private fun existingDef(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("definition", "exists", hint = "This line should reject the existing definition `$def`.")
        )


        private fun existingCard(card: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                containing("card", "exists", hint = "This line should reject the existing card `$card`.")
        )

        private fun removeCard(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("has been removed", hint = "This line should remove the card `$card`.",
                        updateContext = { ctx ->
                            ctx.removeCard(card)
                            ctx.wrongCards.removeAll(listOf(card))
                        })
        )

        private fun removeNonExisting(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("Can't remove \"$card\"", hint = "This line should reject removing non existing card `$card`.")
        )


        private fun importCards(fileName: String, vararg cards: Pair<String, String>) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("${cards.size} cards have been loaded",
                        updateContext = { ctx ->
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            cards.forEach { (card, def) ->
                                if (card in cardToDef) {
                                    defToCard.remove(cardToDef[card]) // erase wrong reverse link
                                }
                                ctx.addCard(card, def) // with update!!
                            }
                        })
        )

        private fun importNonExisting(fileName: String) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("not found", hint = "This line should say, that the file $fileName does not exist.")
        )

        private fun exportCards(fileName: String, cardsSize: Int) = compositePhrase(
                inputAction("export"),
                anyLine(), user(fileName),
                containing("$cardsSize cards have been saved")
        )

        private fun exit() = compositePhrase(
                inputAction("exit"),
                anyLine()
        )

        /** Perform ask action. [ansDefs] are our test answers with definitions.
         * We don't know are they wrong or correct, because the test is random. */
        private fun askCards(vararg ansDefs: String, saveWrongAnsweredCapitals: Boolean = false) = compositePhrase {
            val startPhrases = listOf(
                    inputAction("ask"),
                    anyLine(), user(ansDefs.size.toString())
            )
            // here we add the dialog logic, by creating base OutputLine class with a custom checker
            // we use context to connect with neighbor checkers

            // iterate test answered definitions:
            val repeatingPhrases = ansDefs.map { ansDef ->
                compositePhrase(
                        OutputLine { text, ctx ->
                            val askedCard = text.dropWhile { it != '"' }.dropLastWhile { it != '"' }.trim('"')
                            if (askedCard.isEmpty()) {
                                return@OutputLine CheckResult.FALSE("Not found card in quotes. " +
                                        "This line should ask the definition of a random card.")
                            }
                            if (askedCard !in ctx.cardToDef) {
                                return@OutputLine CheckResult.FALSE("You asked the definition of the non existing card: `$askedCard`.")
                            }
                            ctx.rawData["lastAskedCard"] = askedCard
                            CheckResult.TRUE
                        },
                        // unfortunately we can't access the Context in user action, see documentation of user()
                        user(ansDef),
                        // check the answer:
                        OutputLine { text, ctx ->
                            val askedCard = ctx.rawData["lastAskedCard"]?.toString()
                                    ?: throw IllegalStateException("Not found lastAskedCard in the `ask` checker.")
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            val rightAns = cardToDef[askedCard]

                            val hint = "The asked card was `$askedCard`, the answer was `$ansDef`."
                            if (cardToDef[askedCard] == ansDef)
                                containing("Correct answer", hint = hint).checker(text, ctx)
                            else {
                                ctx.wrongCards += askedCard

                                val isDefFor = defToCard[ansDef]
                                if (isDefFor != null) {
                                    containing("Wrong answer", "The correct one is \"$rightAns\"",
                                            "you've just written the definition of \"$isDefFor\"", hint = hint).checker(text, ctx)
                                } else {
                                    // should not contain definition hint!!
                                    if (text.contains("you've just written the definition of")) {
                                        CheckResult.FALSE("Your line\n`$text`\nshould NOT contain " +
                                                "`you've just written the definition of`.\n$hint")
                                    } else {
                                        containing("Wrong answer", "The correct one is \"$rightAns\"", hint = hint).checker(text, ctx)
                                    }

                                }
                            }.also {
                                // only for these tests. To test restoring wrong capitals from file.
                                if (saveWrongAnsweredCapitals) {
                                    wrongAnsweredCapitals.clear()
                                    wrongAnsweredCapitals.addAll(ctx.wrongCards)
                                }
                            }
                        }
                )
            }
            (startPhrases + repeatingPhrases)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage6Test;

    public class FlashcardsTest extends FlashcardsStage6Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |
    package flashcards;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scan = new Scanner(System.in);
            System.out.println("Input the number of cards:");
            int num_cards = Integer.parseInt(scan.nextLine());
            Card[] cards = new Card[num_cards];
            {
                String card;
                String def;

                for (int i = 0; i < num_cards; i++) {
                    System.out.println(String.format("The card #%d:", i + 1));
                    card = scan.nextLine();

                    System.out.println(String.format("The definition of the card #%d:", i + 1));
                    def = scan.nextLine();
                    cards[i] = new Card(card, def);
                }
            }

            String output = "Card:\n"
                    + "%s\n"
                    + "Definition:\n"
                    + "%s";
            String ans;
            for (Card card : cards) {
                System.out.println(String.format("Print the definition of \"%s\":", card.getCard()));
                ans = scan.nextLine();
                if (card.getDef().equals(ans)) {
                    System.out.println("Correct answer.");
                } else {
                    System.out.println(String.format("Wrong answer. The correct one is \"%s\"", card.getDef()));
                }

                //        System.out.println(String.format(output, card, def));

            }

        }
    }
  learner_created: false
- name: src/flashcards/Card.java
  visible: true
  text: |
    package flashcards;

    public class Card {
        private
            String card;
            String def;

        Card() {

        }
        Card(String card, String def) {
            this.card = card;
            this.def = def;
        }

        public String getCard() {
            return card;
        }
        public void setCard(String card) {
            this.card = card;
        }
        public String getDef() {
            return def;
        }
        public void setDef(String def) {
            this.def = def;
        }

    }
  learner_created: false
- name: capitals.txt
  visible: true
  text: |
    "Great Britain","London"
  learner_created: true
- name: capitalsNew.txt
  visible: true
  text: |
    "France","Paris"
  learner_created: true
- name: src/flashcards/CardParser.java
  visible: true
  text: |
    package flashcards;

    import java.util.regex.Pattern;
    import java.util.regex.Matcher;

    public class CardParser {

        public static String escapeCsv(String input) {
            return input.replaceAll(",", "\\,")
                    .replaceAll(" +", " ")
                    .replaceAll("\"", "\\\"");
        }
        public static String unescapeCsv(String output) {
            return output.trim().replaceAll("^( *\")|(\" *)$", "")
                    .replaceAll("\\\\,",",")
                    .replaceAll("\\\\\"", "\"").trim();
        }

        public static Card parseCard(String line) {
            String matchStr = "((?<=((?<!\\\\)\")) *, *)";
            String matchStr2 = "((?<!(\")) *, *)";
            String desc = "";
            String def = "";

            if (line.isEmpty()) {return null;};
            Matcher match = Pattern.compile(matchStr).matcher(line);
            Matcher match2 = Pattern.compile(matchStr2).matcher(line);
            if (match.find()) {
                desc = unescapeCsv(line.substring(0, match.start()));
                def = unescapeCsv(line.substring(match.end()));
            } else if (match2.find()) {
                desc = unescapeCsv(line.substring(0, match2.start()));
                def = unescapeCsv(line.substring(match2.end()));
            } else {
                return null;
            }
            return new Card(desc, def);
        }
    }
  learner_created: true
- name: src/flashcards/CardBank.java
  visible: true
  text: |
    package flashcards;
    import java.util.*;
    import java.util.Random;
    import java.util.Date;

    public class CardBank implements Iterable<Card> {
        ArrayList<Card> cards = new ArrayList<>();
        Map<String, String> descs = new HashMap<>();
        Map<String, String> defs = new HashMap<>();
        ArrayList<String> questions = new ArrayList<>();
        Random rand = new Random(new Date().getTime());

        CardBank() {}
        CardBank(Card[] cards) {
            addAll(cards);
        }
        private int addAll(Card[] cards) {
            int cardsAdded = 0;
            for (Card card : cards) {
                cardsAdded += addCard(card);
            }
            return cardsAdded;
        }
        public boolean containsDesc(String desc) {
            return descs.containsKey(desc);
        }
        public boolean containsDef(String def) {
            return defs.containsKey(def);
        }
        public String getByDef(String def) {
            return defs.get(def);
        }
        public String getByDesc(String desc) {
            return descs.get(desc);
        }
        public int addCard(Card newCard) {
            String desc = newCard.getCard();
            String def = newCard.getDef();
            if (containsDesc(desc) && !containsDef(def)) {
                removeCard(desc);
            }
            if (!containsDesc(desc) && !containsDef(def)) {
                descs.put(desc, def);
                defs.put(def, desc);
                cards.add(newCard);
                questions.add(desc);
                return 1;
            }

            return 0;
        }
        public int removeCard(String desc) {
            if (containsDesc(desc)) {
    //            System.out.println(new Card(desc, descs.get(desc)).toString());
    //            cards.remove(new Card(desc, descs.get(desc)));
    //            cards.removeIf(card -> card.getDesc() == desc);
    //            System.out.println("Index = " + cards.indexOf(new Card(desc, descs.get(desc))));
                for (Card card : cards) {
                    if(card.getDesc().equals(desc)) {
                        cards.remove(card);
                        break;
                    }
                }
    //            cards.forEach(System.out::println);
                defs.remove(descs.get(desc));
                descs.remove(desc);
                questions.remove(desc);
                return 1;
            }
            return 0;
        }
        public Card getRandom() {
            if (questions.size() == 0) {
                questions.addAll(descs.keySet());
            }
            int index = rand.nextInt(questions.size());
            String desc = questions.get(index);
            Card result = new Card(desc, descs.get(desc));
            questions.remove(index);
            return result;
        }
        @Override
        public Iterator<Card> iterator() {
            return cards.iterator();
        }
    }
  learner_created: true
- name: src/flashcards/Menu.java
  visible: true
  text: |
    package flashcards;

    import java.io.*;
    import java.util.Scanner;
    import java.io.PrintWriter;
    import static flashcards.CardParser.*;
    //import org.apache.commons.text.StringEscapeUtils;


    public class Menu {
    //    int num_cards = Integer.parseInt(scan.nextLine());
        CardBank cards = new CardBank();
        Scanner scan;

        public Menu(Scanner scan) {
            this.scan = scan;
        }

        public void add(int num_cards) {
            String card = "";
            String def = "";
            boolean exists;
            for (int i = 0; i < num_cards; i++) {
                exists = false;
    //            System.out.println(String.format("The card #%d:", i + 1));
                System.out.println(String.format("The card"));

                card = scan.nextLine().trim().replaceAll("[ +|\n]", " ");
                if (cards.containsDesc(card)) {
                    exists = true;
                    System.out.println(String.format("The card \"%s\" already exists.", card));
    //                card = scan.nextLine().trim().replaceAll("[ +|\n]", " ");
                }
    //            System.out.println(String.format("The definition of the card #%d:", i + 1));
                if (exists == false) {
                    System.out.println(String.format("The definition of the card:"));
                    def = scan.nextLine().trim().replaceAll("[ +|\n]", " ");
                    if (cards.containsDef(def)) {
                        exists = true;
                        System.out.println(String.format("The definition \"%s\" already exists.", def));
    //                def = scan.nextLine().trim().replaceAll("[ +|\n]", " ");
                    }
                }
                if (exists == false) {
                    cards.addCard(new Card(card, def));
                    System.out.println(String.format("The pair (\"%s\":\"%s\") has been added.\n", card, def));
                }
            }
        }
        public void add() {add(1);}
        public void remove() {
            System.out.println("The card:");
            remove(scan.nextLine().trim().replaceAll("[ +|\n]", " "));
        }
        public void remove(String desc) {
            if (cards.containsDesc(desc)) {
                cards.removeCard(desc);
                System.out.println("The card has been removed.\n");
            } else {
                System.out.println(String.format("Can't remove \"%s\": there is no such card.\n", desc));
            }
        }
        public void ask() {
            System.out.println("How many times to ask?");
            ask(Integer.parseInt(scan.nextLine().trim()));
        }
        public void ask(int numQuestions) {
            if (numQuestions <= 0) {
                return;
            }
            String ans;
            String end;
            Card card;
            for (int i = 0; i < numQuestions; i++) {
                card = cards.getRandom();
                System.out.println(String.format("Print the definition of \"%s\":", card.getCard()));
                ans = scan.nextLine().trim().replaceAll("[ +|\n]", " ");
                if (card.getDef().toLowerCase().equals(ans.toLowerCase())) {
                    System.out.println("Correct answer.\n");
                } else {
                    end = cards.containsDef(ans) ?
                            String.format(", you\'ve just written the definition of \"%s\".", cards.getByDef(ans))
                            : ".";
                    System.out.println(String.format("Wrong answer. The correct one is \"%s\"%s\n", card.getDef(), end));
                }
                //        System.out.println(String.format(output, card, def));
            }

        }
        public void exportCards() {
            System.out.println("File name:");
            exportCards(scan.nextLine());
        }
        public void exportCards(String fileName) {
            try (PrintWriter writer = new PrintWriter(fileName)) {
                int numSaved = 0;
                for (Card card : cards) {
                    writer.printf("\"%s\",\"%s\"\n",
                            escapeCsv(card.getDesc()),
                            escapeCsv(card.getDef()));
                    numSaved++;
                }
                System.out.println(String.format("%d cards have been saved.\n", numSaved));
            } catch (IOException ioe) {
                System.out.println("Error: Unable to  write to file.\n");
            }
        }
        public void importCards() {
            System.out.println("File name:");
            importCards(scan.nextLine());
        }
        public void importCards(String fileName) {

            try (Scanner reader = new Scanner(new File(fileName))) {
                int numAdded = 0;
                Card importedCard;
                String next;
                while (reader.hasNext()) {
                    next = reader.nextLine();
                    importedCard = parseCard(next);
                    if (importedCard != null) {
                        cards.addCard(importedCard);
                        numAdded += 1;
                    }
                }
                System.out.println(String.format("%d cards have been loaded.\n", numAdded));
            } catch (FileNotFoundException ioe) {
                System.out.println("File not found.\n");
            }

        }
    //    public static String escapeCsv(String input) {
    //        return input.replaceAll(",", "\\,")
    //                    .replaceAll(" +", " ")
    //                    .replaceAll("\"", "\\\"");
    //    }
    //    public static String unescapeCsv(String output) {
    //        return output.replaceAll("\\\\,",",")
    //                .replaceAll("\\\\\"", "\"");
    //    }

    }
  learner_created: true
- name: src/flashcards/TeePrintStream.java
  visible: true
  learner_created: true
- name: src/flashcards/DoubleBufferInputStream.java
  visible: true
  learner_created: true
- name: src/flashcards/ReusableBufferedInputStream.java
  visible: true
  learner_created: true
- name: src/flashcards/CustomInputFilter.java
  visible: true
  learner_created: true
- name: testLog.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/237/implement
status: Solved
record: 6
